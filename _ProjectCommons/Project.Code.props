<!--

  Default settings for all production code (i.e. non-test) projects.

  To use it, create a .NET Core or .NET Standard project (modern project format)
  and then add this line at the top:

    <Import Project="$(ProjectCommonsDirectory)Project.Code.props" />

-->
<!-- You can find the latest version of this file here: https://github.com/skrysmanski/base-dotnet -->
<Project>

  <Import Project="$(MSBuildThisFileDirectory)Project.Shared.props" />
  <Import Project="$(MSBuildThisFileDirectory)Project.Code_Packages.props" />

  <PropertyGroup Label="Build Settings">
    <!--
      Since this project template is primarily used for open source, there's no point in "hiding"
      the debug symbols (as it's often the case in closed source software). So, by default, debug
      symbols are embedded in the assembly itself.

      The only real downside of this is that the assembly gets noticeably bigger (usually about 30%).
      However, in most cases, we're still talking about kB here - not MB. So we use this as default
      and library owners can change it back to "portable", if necessary.

      See also: https://github.com/dotnet/sdk/issues/2679

      NOTE: With <DeterministicSourcePaths> enabled for NuGet packages (in Release mode), the debug
        symbols will not(!) contain the directory names from build machine anymore (like "D:\Programming\...").
        See "Project.NuGetPackage.props" for more details.
    -->
    <DebugSymbols>true</DebugSymbols>
    <!-- NOTE: "embedded" means "embedded portable". It's the same format as "portable", just integrated into the assembly. -->
    <DebugType>embedded</DebugType>
  </PropertyGroup>

  <!--
    Make copyright based on assembly name (a best pratice for open source projects).

    For some more details on copyrights in open source projects, see:
    * https://www.linuxfoundation.org/blog/2020/01/copyright-notices-in-open-source-software-projects/
    * https://docs.github.com/en/free-pro-team@latest/github/site-policy/github-terms-of-service#6-contributions-under-repository-license
  -->
  <Target Name="_GenerateCopyright" BeforeTargets="GetAssemblyAttributes" Condition=" '$(Copyright)' == '' ">
    <PropertyGroup>
      <Copyright>© $([System.DateTime]::Now.ToString(yyyy)) Contributors to $(AssemblyName)</Copyright>
    </PropertyGroup>
  </Target>

  <!--
    Put the current commit's id (hash) in the "Product version" ($(InformationalVersion)). This happens automatically
    via the $(SourceRevisionId) property.

    This version is visible in the "Details" tab of the file properties of the generated assembly.

    See: https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#assemblyinfo-properties
  -->
  <Target Name="_GenerateSourceRevisionId" BeforeTargets="GetAssemblyVersion" Condition=" '$(SourceRevisionId)' == '' AND '$(RepositoryType)' == 'git' ">
    <Exec Command="git rev-parse --short=12 HEAD" ConsoleToMSBuild="true" StandardOutputImportance="low">
      <Output TaskParameter="ConsoleOutput" PropertyName="SourceRevisionId" />
    </Exec>
  </Target>

  <!--
    Sets "File Description" property (in the Details tab in the file properties of the generated assembly) to $(Description),
    if there is one. Otherwise, by default, this value is set to the name of the assembly.
  -->
  <Target Name="_GenerateFileDescriptionInfo" BeforeTargets="GetAssemblyAttributes" Condition=" '$(Description)' != '' ">
    <PropertyGroup>
      <AssemblyTitle>$(Description)</AssemblyTitle>
    </PropertyGroup>
  </Target>

  <!--
    Checks that a <Version> has been specified for this project/assembly. If none is
    set, the version defaults to "1.0.0.0". This version number, if not chosen deliberatly -
    could potentially be problematic if, say, a created NuGet package was accidentially
    uploaded. Because of these problems, we require each code project to explicetly specify
    a version number.
  -->
  <PropertyGroup>
    <Version>0.0.0.0</Version>
  </PropertyGroup>

  <Target Name="_CheckVersion" AfterTargets="GetAssemblyAttributes" Condition="'$(Configuration)' == 'Release'">
    <Error Text="No &lt;Version&gt; has been specified." Condition=" '$(Version)' == '0.0.0.0' " />
  </Target>

  <!--
    Defines assembly wide attributes.

    For "custom" assembly attributes, see: https://github.com/dotnet/msbuild/issues/2281#issuecomment-803217731
  -->
  <ItemGroup Label="Assembly Attributes">
    <!--
      Make internals automatically available to the associated tests project.
    -->
    <InternalsVisibleTo Include="$(MSBuildProjectName).Tests" />

    <!--
      Mark this assembly as "CLS compliant" or "not CLS compliant".

      You should always mark an assembly as "CLS compliant", if possible (this is also the default in "Project.Code.props").

      The only reason to mark an assembly as "not CLS compliant" is if it's using "not CLS compliant"
      dependencies that have "public" or "protected" visibility. ASP.NET Core is an example of such a dependency.

      To mark this assembly as "not CLS compliant", add the property "<ClsCompliant>false</ClsCompliant>" to
      your project file.

      For details, see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1014
    -->
    <AssemblyAttribute Include="System.CLSCompliantAttribute">
        <_Parameter1 Condition=" '$(ClsCompliant)' != 'false' ">true</_Parameter1>
        <_Parameter1 Condition=" '$(ClsCompliant)' == 'false' ">false</_Parameter1>
    </AssemblyAttribute>
  </ItemGroup>

  <!--
    .NET static code analysis

    See: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview
  -->
  <PropertyGroup Label="Code Analysis">
    <!--
      Enable all CA rules by default. Otherwise only a small subset will be enabled by default.
      See: https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#analysismode
    -->
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
  </PropertyGroup>

  <ItemGroup Label="Code Analysis">
    <!-- This file specifies the severities of all CA rules. -->
    <GlobalAnalyzerConfigFiles Include="$(ProjectsRootDirectory)_StyleGuide/CA.globalconfig" />
  </ItemGroup>

</Project>
